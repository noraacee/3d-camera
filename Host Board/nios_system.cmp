	component nios_system is
		port (
			clock_50_clk                : in    std_logic                     := 'X';             -- clk
			reset_50_reset_n            : in    std_logic                     := 'X';             -- reset_n
			video_decoder_TD_CLK27      : in    std_logic                     := 'X';             -- TD_CLK27
			video_decoder_TD_DATA       : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- TD_DATA
			video_decoder_TD_HS         : in    std_logic                     := 'X';             -- TD_HS
			video_decoder_TD_VS         : in    std_logic                     := 'X';             -- TD_VS
			video_decoder_clk27_reset   : in    std_logic                     := 'X';             -- clk27_reset
			video_decoder_TD_RESET      : out   std_logic;                                        -- TD_RESET
			video_decoder_overflow_flag : out   std_logic;                                        -- overflow_flag
			sram_DQ                     : inout std_logic_vector(15 downto 0) := (others => 'X'); -- DQ
			sram_ADDR                   : out   std_logic_vector(17 downto 0);                    -- ADDR
			sram_LB_N                   : out   std_logic;                                        -- LB_N
			sram_UB_N                   : out   std_logic;                                        -- UB_N
			sram_CE_N                   : out   std_logic;                                        -- CE_N
			sram_OE_N                   : out   std_logic;                                        -- OE_N
			sram_WE_N                   : out   std_logic;                                        -- WE_N
			vga_controller_CLK          : out   std_logic;                                        -- CLK
			vga_controller_HS           : out   std_logic;                                        -- HS
			vga_controller_VS           : out   std_logic;                                        -- VS
			vga_controller_BLANK        : out   std_logic;                                        -- BLANK
			vga_controller_SYNC         : out   std_logic;                                        -- SYNC
			vga_controller_R            : out   std_logic_vector(9 downto 0);                     -- R
			vga_controller_G            : out   std_logic_vector(9 downto 0);                     -- G
			vga_controller_B            : out   std_logic_vector(9 downto 0);                     -- B
			threedlizer_reset_out       : out   std_logic;                                        -- reset_out
			threedlizer_pixel_r_ready   : in    std_logic                     := 'X';             -- pixel_r_ready
			threedlizer_pixel_r         : in    std_logic_vector(4 downto 0)  := (others => 'X'); -- pixel_r
			threedlizer_pixel_offset    : in    std_logic_vector(17 downto 0) := (others => 'X'); -- pixel_offset
			threedlizer_pixel_r_done    : out   std_logic;                                        -- pixel_r_done
			threedlizer_red_led         : out   std_logic_vector(17 downto 0);                    -- red_led
			threedlizer_clk_in          : in    std_logic                     := 'X';             -- clk_in
			buffer_reader_clk_in        : in    std_logic                     := 'X';             -- clk_in
			buffer_reader_pixel_set     : in    std_logic                     := 'X';             -- pixel_set
			buffer_reader_pixel_offset  : in    std_logic_vector(17 downto 0) := (others => 'X'); -- pixel_offset
			buffer_reader_pixel_ready   : out   std_logic;                                        -- pixel_ready
			buffer_reader_pixel         : out   std_logic_vector(15 downto 0);                    -- pixel
			buffer_reader_red_led       : out   std_logic_vector(1 downto 0)                      -- red_led
		);
	end component nios_system;

